use ark_ff::{BigInteger256, PrimeField};
use mina_hasher::Fp;

use crate::{hash_fields, CurveAffine, PlonkVerificationKeyEvals};

pub struct MessagesForNextStepProof {
    pub app_state: [Fp; 1],
    pub dlog_plonk_index: PlonkVerificationKeyEvals,
    pub challenge_polynomial_commitments: [CurveAffine; 2],
    pub old_bulletproof_challenges: [[Fp; 16]; 2],
}

impl MessagesForNextStepProof {
    /// Implementation of `to_field_elements`
    /// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/pickles/composition_types/composition_types.ml#L493
    pub fn to_fields(&self) -> Vec<Fp> {
        const NFIELDS: usize = 93;

        let mut fields = Vec::with_capacity(NFIELDS);

        // Self::dlog_plonk_index
        // Refactor with `src/account/account.rs`, this is the same code
        {
            let index = &self.dlog_plonk_index;

            for field in index.sigma {
                fields.push(field.0);
                fields.push(field.1);
            }

            for field in index.coefficients {
                fields.push(field.0);
                fields.push(field.1);
            }

            fields.push(index.generic.0);
            fields.push(index.generic.1);

            fields.push(index.psm.0);
            fields.push(index.psm.1);

            fields.push(index.complete_add.0);
            fields.push(index.complete_add.1);

            fields.push(index.mul.0);
            fields.push(index.mul.1);

            fields.push(index.emul.0);
            fields.push(index.emul.1);

            fields.push(index.endomul_scalar.0);
            fields.push(index.endomul_scalar.1);
        }

        // Self::app_state
        fields.push(self.app_state[0]);

        // Self::challenge_polynomial_commitments and Self::old_bulletproof_challenges
        let commitments = &self.challenge_polynomial_commitments;
        let old_challenges = &self.old_bulletproof_challenges;

        for (commitments, old) in commitments.iter().zip(old_challenges) {
            fields.push(commitments.0);
            fields.push(commitments.1);

            fields.extend_from_slice(old);
        }

        assert_eq!(fields.len(), NFIELDS);

        fields
    }
}

/// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/pickles/common.ml#L33
pub fn hash_messages_for_next_step_proof(msg: &MessagesForNextStepProof) -> [u64; 4] {
    let fields: Vec<Fp> = msg.to_fields();
    let field: Fp = hash_fields(&fields);

    let bigint: BigInteger256 = field.into_repr();
    [bigint.0[0], bigint.0[1], bigint.0[2], bigint.0[3]]
}

#[cfg(test)]
mod tests {
    use std::str::FromStr;

    #[cfg(target_family = "wasm")]
    use wasm_bindgen_test::wasm_bindgen_test as test;

    use crate::FpExt;

    use super::*;

    /// Test that take the same inputs as in
    /// https://github.com/name-placeholder/mina-block-verifier-poc/blob/15d926f04948a35f4ee284c2b43bb82ae1798b0b/src/data/6324_state_with_proof_for_mina_node_minified.json
    #[test]
    fn test_messages_for_next_step_proof() {
        // Fp::from_str
        let f = |s| Fp::from_str(s).unwrap();

        // Same data as in `6324_state_with_proof_for_mina_node_minified.json`
        let msg = MessagesForNextStepProof {
            app_state: [f(
                "18374648090405860613992788233169821778993111003846333489723278775260971534309",
            ); 1],
            dlog_plonk_index: PlonkVerificationKeyEvals {
                sigma: [
                    CurveAffine(f("7306136642597923897555791151863996660212462335849450287367524537095180221634"),f("295836087001599150219965185724981361284218003091634650488121505386715848421")),
                    CurveAffine(f("16282821295661236479023912685539589269086626120234649164462902685519476656592"),f("4295205064453230912872101449993170792905970401678754749988147216841537937620")),
                    CurveAffine(f("28198697833219334189923816684717002543602920069910594785597266487498148523870"),f("17891203830156453876956078996004920271036014021533417224170974067208216601703")),
                    CurveAffine(f("5911229141700227144541715457557567697281122878785361348057987395367730692283"),f("22708119636146901915922769433803693592137966281563094238309392462134696713324")),
                    CurveAffine(f("15255289086154637723543383447202141216898127084181538793835838955534680243549"),f("9822992368845619458542559122419135424964624477009905295720933437908812438194")),
                    CurveAffine(f("28336751196692125825206280078298394562971507269177652352864439918563362023984"),f("17798914835779426211970460006818900956839587778737086433910561148699936807427")),
                    CurveAffine(f("12173487650256236567877294766780225205439671195087725509374927206658919988314"),f("8546295955797864127010988341190793828517919678470921685302947319507151962335")),
                ],
                coefficients: [
                    CurveAffine(f("15105854952902418834269591301217280524366983711045984608317191166708978127145"),f("18491376365795350144503269408455530343793482052663015956178048715513611406203")),
                    CurveAffine(f("16221864536502615631980979964668288450317317371147091060694095899151503639747"),f("9519306118137437477296160681347787831718742786237537419021099081673273432077")),
                    CurveAffine(f("1828375556492032543370630871599181680626054083827149513821341616496533931180"),f("14532553130399504128864273815175983572681327963499643450830578683158045051088")),
                    CurveAffine(f("13806143828658920604653811214459745160526156299899194105003039829404281939236"),f("21677366383028409741651124301672889055915143610106128174078188209337480718539")),
                    CurveAffine(f("7497365406686591516136275799519851738056433500165297000450415380901841834738"),f("11082673892088893582121464103698089526189574961395186300560026072577686710261")),
                    CurveAffine(f("21840051173290088750377335154124032240668643658355954102158068406791911456411"),f("17351682675035183551436994752568730447765316333728829284275431639098039334512")),
                    CurveAffine(f("14022762599686302176026646914549540717100346176029056416113460334917709226744"),f("27978245190056279229692763190303424169549043084254373363906247160646199594515")),
                    CurveAffine(f("14461461771799677654017777117338945851377547219104322838600220560516293427356"),f("17564757440118220600675489280590254151923712940706892869478972769840418457635")),
                    CurveAffine(f("21815598907196777691445920277857002103959228082570912063323130218788538733193"),f("7358237762751057012424941296608466274034817842087745360389357379284117549732")),
                    CurveAffine(f("11810626818371604294708453458309753376008077755506945420564072757415239409545"),f("26912748767395245377771123936593955842239086573241116606529426101611852107474")),
                    CurveAffine(f("28045754565497567218313815510153164850160812290001533322256204556878672210685"),f("4430614918184468006846751296134493176588839662954289976354926108393111505348")),
                    CurveAffine(f("19872404709285819095020477536140820966231416330563398437289255091306661382284"),f("19326322450955066267758337560000055419883224223428472906580812324929588841264")),
                    CurveAffine(f("27674068120067053785042736434998263020785858204524681324028670844064644633023"),f("27412857330835622333013445447634112239898888873844827807756556432593637880726")),
                    CurveAffine(f("24682236218499316256116184057935956900066450357800305437458989367500718714833"),f("27180938934433927690377545371633915753075499681300196017879714997797679192332")),
                    CurveAffine(f("25629315461974072970256979424923440745009227427597797969419480653812297129276"),f("1016868605640715040040077111084256295412989295229805290627862796628513565389")),                ],
                generic: CurveAffine(f("12174451344901867371747121143916474287913641433558421954298894775115636105605"),f("12378066171942160329149126580141604161241179887990644873241995425596885988734")),
                psm: CurveAffine(f("7354720043741565412245146949416661672231346925994487137406963541785007652002"),f("18137987077150694625815400585246393656498160562154344002755317004470145216091")),
                complete_add: CurveAffine(f("20176380948677499445673804755402884536434103092222401927043369592526199334698"),f("26639113406603762994997253872861268998287702768326719951107939705363924703049")),
                mul: CurveAffine(f("16207127342744662697004906974217699328124928520738315414896942451468679742680"),f("10042405468630587369024209399619359647876676370159830003746139596973255635041")),
                emul: CurveAffine(f("2106392139716826410921444012744773412824354042372186953626000304539450302912"),f("17561438246294780941275031774356204175014323179177294715496325182731868568910")),
                endomul_scalar: CurveAffine(f("4292031084185452020905940016648601803499113748499572807208798084208217009321"),f("16797976570717345665130946180893310089564099546398446160344589290942425835566")),
            },
            challenge_polynomial_commitments: [
                CurveAffine(f("12686921579279181053907007016585984857396279914247611886326721202037913453019"),f("17769836043765024617902464193165129733172354787973469110485472256690190533727")),
CurveAffine(f("21022521418477672796138321373890300031459566700970481245425917589929493452691"),f("4307241244195583897765346136869393587010871207731931320075062354311383981886")),
            ],
            old_bulletproof_challenges: [
                [
                    f("7064008822864728398858417698649153554618393735019982159700213736571223036821"),
                    f("21281073930096202884976340572605376014917627927607000098124963387126671667405"),
                    f("20034221077127088921131022285724504665904750595809121027858777196941115095595"),
                    f("18497339512896533967070595151637618702096421683793996188803218728257093313954"),
                    f("26091707259541979535386026279646546924481219402460945255985587200333895442426"),
                    f("26000802478877378291818950871303958371690312575800175603275158984631747112314"),
                    f("3542775955255721718735057551619208290322691095579511881465771193916627523656"),
                    f("26082193213255146858325625064941365409422644280364303832412501842706109482352"),
                    f("14045706980484410694469015017617110793948725477238650483822693423475791735584"),
                    f("19471582594431150457263082825199126200392919902939760347730982393598455884567"),
                    f("1326396224493213224809637465524487722432218763470273737330947122279510339127"),
                    f("17485742224041066720858261709734580297392897788368828400728418930917070940077"),
                    f("11369682275649236437578679786208728227049581168916414391705587421204991504471"),
                    f("5558430160842950378525019782179979114837605858253956740879954326712738838869"),
                    f("17514922848108718369845316737207968652832912751889238861905018424256428652733"),
                    f("11088960946452242729814251490831984807138805895197664788816609458265399565988"),
                ],
                [
                    f("7495663189519076456878324238415292467012945870012832444850485639358393479268"),
                    f("388698164585548974934817724189574785139851269733029709355370076076616265220"),
                    f("16211690239820640934419707440800640715772094470488029352806394140849460499366"),
                    f("19660767386333838085549000243591542798150442487419024559562124380763066947223"),
                    f("3804191934641277266825939456740395716006727418575334949907761799006951240328"),
                    f("18570333327677121098853677483616132304851142649800358431192661910558495770797"),
                    f("2885988345150694614354230616472074099998052091287012799686730182775015809772"),
                    f("26941570725129557194472457464313030750768597876248657068167847720705824432410"),
                    f("11031939102021548268582687527395546394462552178834987820391978709224042719328"),
                    f("6635159214963234537223243370996260502046741015718543202847863438182226573507"),
                    f("3123982144639717810070104930175949984822659675428941158107237873724846395068"),
                    f("22100131743595904534278023371975366782332995882031444298009028129572218436492"),
                    f("26699469737251775041171879406801327630656476958614785279587470558078266497754"),
                    f("14931081622979512493702242057574822158556931395424601456904686553568978135221"),
                    f("13215496949030789875154586717734663769533434569051642948945201035069761057380"),
                    f("9608414576668132631768032439576786729901517711700624403511207659611494885692"),
                ]
            ],
        };

        let fields = msg.to_fields();
        let fields_str: Vec<String> = fields.iter().map(Fp::to_decimal).collect();

        const OCAML_LIST_FIELDS: &[&str] = &[
            "7306136642597923897555791151863996660212462335849450287367524537095180221634",
            "295836087001599150219965185724981361284218003091634650488121505386715848421",
            "16282821295661236479023912685539589269086626120234649164462902685519476656592",
            "4295205064453230912872101449993170792905970401678754749988147216841537937620",
            "28198697833219334189923816684717002543602920069910594785597266487498148523870",
            "17891203830156453876956078996004920271036014021533417224170974067208216601703",
            "5911229141700227144541715457557567697281122878785361348057987395367730692283",
            "22708119636146901915922769433803693592137966281563094238309392462134696713324",
            "15255289086154637723543383447202141216898127084181538793835838955534680243549",
            "9822992368845619458542559122419135424964624477009905295720933437908812438194",
            "28336751196692125825206280078298394562971507269177652352864439918563362023984",
            "17798914835779426211970460006818900956839587778737086433910561148699936807427",
            "12173487650256236567877294766780225205439671195087725509374927206658919988314",
            "8546295955797864127010988341190793828517919678470921685302947319507151962335",
            "15105854952902418834269591301217280524366983711045984608317191166708978127145",
            "18491376365795350144503269408455530343793482052663015956178048715513611406203",
            "16221864536502615631980979964668288450317317371147091060694095899151503639747",
            "9519306118137437477296160681347787831718742786237537419021099081673273432077",
            "1828375556492032543370630871599181680626054083827149513821341616496533931180",
            "14532553130399504128864273815175983572681327963499643450830578683158045051088",
            "13806143828658920604653811214459745160526156299899194105003039829404281939236",
            "21677366383028409741651124301672889055915143610106128174078188209337480718539",
            "7497365406686591516136275799519851738056433500165297000450415380901841834738",
            "11082673892088893582121464103698089526189574961395186300560026072577686710261",
            "21840051173290088750377335154124032240668643658355954102158068406791911456411",
            "17351682675035183551436994752568730447765316333728829284275431639098039334512",
            "14022762599686302176026646914549540717100346176029056416113460334917709226744",
            "27978245190056279229692763190303424169549043084254373363906247160646199594515",
            "14461461771799677654017777117338945851377547219104322838600220560516293427356",
            "17564757440118220600675489280590254151923712940706892869478972769840418457635",
            "21815598907196777691445920277857002103959228082570912063323130218788538733193",
            "7358237762751057012424941296608466274034817842087745360389357379284117549732",
            "11810626818371604294708453458309753376008077755506945420564072757415239409545",
            "26912748767395245377771123936593955842239086573241116606529426101611852107474",
            "28045754565497567218313815510153164850160812290001533322256204556878672210685",
            "4430614918184468006846751296134493176588839662954289976354926108393111505348",
            "19872404709285819095020477536140820966231416330563398437289255091306661382284",
            "19326322450955066267758337560000055419883224223428472906580812324929588841264",
            "27674068120067053785042736434998263020785858204524681324028670844064644633023",
            "27412857330835622333013445447634112239898888873844827807756556432593637880726",
            "24682236218499316256116184057935956900066450357800305437458989367500718714833",
            "27180938934433927690377545371633915753075499681300196017879714997797679192332",
            "25629315461974072970256979424923440745009227427597797969419480653812297129276",
            "1016868605640715040040077111084256295412989295229805290627862796628513565389",
            "12174451344901867371747121143916474287913641433558421954298894775115636105605",
            "12378066171942160329149126580141604161241179887990644873241995425596885988734",
            "7354720043741565412245146949416661672231346925994487137406963541785007652002",
            "18137987077150694625815400585246393656498160562154344002755317004470145216091",
            "20176380948677499445673804755402884536434103092222401927043369592526199334698",
            "26639113406603762994997253872861268998287702768326719951107939705363924703049",
            "16207127342744662697004906974217699328124928520738315414896942451468679742680",
            "10042405468630587369024209399619359647876676370159830003746139596973255635041",
            "2106392139716826410921444012744773412824354042372186953626000304539450302912",
            "17561438246294780941275031774356204175014323179177294715496325182731868568910",
            "4292031084185452020905940016648601803499113748499572807208798084208217009321",
            "16797976570717345665130946180893310089564099546398446160344589290942425835566",
            "18374648090405860613992788233169821778993111003846333489723278775260971534309",
            "12686921579279181053907007016585984857396279914247611886326721202037913453019",
            "17769836043765024617902464193165129733172354787973469110485472256690190533727",
            "7064008822864728398858417698649153554618393735019982159700213736571223036821",
            "21281073930096202884976340572605376014917627927607000098124963387126671667405",
            "20034221077127088921131022285724504665904750595809121027858777196941115095595",
            "18497339512896533967070595151637618702096421683793996188803218728257093313954",
            "26091707259541979535386026279646546924481219402460945255985587200333895442426",
            "26000802478877378291818950871303958371690312575800175603275158984631747112314",
            "3542775955255721718735057551619208290322691095579511881465771193916627523656",
            "26082193213255146858325625064941365409422644280364303832412501842706109482352",
            "14045706980484410694469015017617110793948725477238650483822693423475791735584",
            "19471582594431150457263082825199126200392919902939760347730982393598455884567",
            "1326396224493213224809637465524487722432218763470273737330947122279510339127",
            "17485742224041066720858261709734580297392897788368828400728418930917070940077",
            "11369682275649236437578679786208728227049581168916414391705587421204991504471",
            "5558430160842950378525019782179979114837605858253956740879954326712738838869",
            "17514922848108718369845316737207968652832912751889238861905018424256428652733",
            "11088960946452242729814251490831984807138805895197664788816609458265399565988",
            "21022521418477672796138321373890300031459566700970481245425917589929493452691",
            "4307241244195583897765346136869393587010871207731931320075062354311383981886",
            "7495663189519076456878324238415292467012945870012832444850485639358393479268",
            "388698164585548974934817724189574785139851269733029709355370076076616265220",
            "16211690239820640934419707440800640715772094470488029352806394140849460499366",
            "19660767386333838085549000243591542798150442487419024559562124380763066947223",
            "3804191934641277266825939456740395716006727418575334949907761799006951240328",
            "18570333327677121098853677483616132304851142649800358431192661910558495770797",
            "2885988345150694614354230616472074099998052091287012799686730182775015809772",
            "26941570725129557194472457464313030750768597876248657068167847720705824432410",
            "11031939102021548268582687527395546394462552178834987820391978709224042719328",
            "6635159214963234537223243370996260502046741015718543202847863438182226573507",
            "3123982144639717810070104930175949984822659675428941158107237873724846395068",
            "22100131743595904534278023371975366782332995882031444298009028129572218436492",
            "26699469737251775041171879406801327630656476958614785279587470558078266497754",
            "14931081622979512493702242057574822158556931395424601456904686553568978135221",
            "13215496949030789875154586717734663769533434569051642948945201035069761057380",
            "9608414576668132631768032439576786729901517711700624403511207659611494885692",
        ];

        // Make sure that we got the same list of fields as in OCaml
        assert_eq!(fields_str, OCAML_LIST_FIELDS);

        let result = hash_messages_for_next_step_proof(&msg);
        const OCAML_RESULT: [u64; 4] = [
            7912308706379928291,
            8689988569980666660,
            5997160798854948936,
            3770142804027174900,
        ];

        // Same result as OCaml
        assert_eq!(result, OCAML_RESULT);
    }
}
