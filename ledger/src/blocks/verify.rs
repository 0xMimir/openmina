use std::str::FromStr;

use ark_ff::{BigInteger256, PrimeField, UniformRand};
use mina_curves::pasta::Fq;
use mina_hasher::Fp;
use serde::{Deserialize, Serialize};

use crate::{hash_fields, CurveAffine, PlonkVerificationKeyEvals};
use crate::{PicklesProofProofsVerified2ReprStableV2MessagesForNextStepProof, ProtocolState};

pub struct MessagesForNextWrapProof {
    challenge_polynomial_commitment: CurveAffine<Fq>,
    old_bulletproof_challenges: [[Fq; 15]; 2],
}

impl MessagesForNextWrapProof {
    /// Implementation of `hash_messages_for_next_wrap_proof`
    /// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/pickles/wrap_hack.ml#L50
    pub fn hash(&self) -> [u64; 4] {
        let fields: Vec<Fq> = self.to_fields();
        let field: Fq = hash_fields(&fields);

        let bigint: BigInteger256 = field.into_repr();
        bigint.0
    }

    /// Implementation of `to_field_elements`
    /// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/pickles/composition_types/composition_types.ml#L356
    fn to_fields(&self) -> Vec<Fq> {
        const NFIELDS: usize = 32;

        let mut fields = Vec::with_capacity(NFIELDS);

        let padding = 2usize
            .checked_sub(self.old_bulletproof_challenges.len())
            .expect("old_bulletproof_challenges must be of length <= 2");

        // TODO: Currently `Self::old_bulletproof_challenges` is always of length 2
        for _ in 0..padding {
            fields.extend_from_slice(&Self::dummy_padding());
        }

        for challenges in &self.old_bulletproof_challenges {
            fields.extend_from_slice(challenges);
        }

        fields.push(self.challenge_polynomial_commitment.0);
        fields.push(self.challenge_polynomial_commitment.1);

        assert_eq!(fields.len(), NFIELDS);

        fields
    }

    /// Value of `Dummy.Ipa.Wrap.challenges_computed` here:
    /// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/pickles/wrap_hack.ml#L37
    ///
    /// Those are constants but they are computed once at runtime in Mina.
    /// TODO: Compute them instead of hardcoded values
    fn dummy_padding() -> [Fq; 15] {
        let f = |s| Fq::from_str(s).unwrap();

        [
            f("7048930911355605315581096707847688535149125545610393399193999502037687877674"),
            f("5945064094191074331354717685811267396540107129706976521474145740173204364019"),
            f("20315491820009986698838977727629973056499886675589920515484193128018854963801"),
            f("375929229548289966749422550601268097380795636681684498450629863247980915833"),
            f("19682218496321100578766622300447982536359891434050417209656101638029891689955"),
            f("516598185966802396400068849903674663130928531697254466925429658676832606723"),
            f("23729760760563685146228624125180554011222918208600079938584869191222807389336"),
            f("11155777282048225577422475738306432747575091690354122761439079853293714987855"),
            f("24977767586983413450834833875715786066408803952857478894197349635213480783870"),
            f("2813347787496113574506936084777563965225649411532015639663405402448028142689"),
            f("22626141769059119580550800305467929090916842064220293932303261732461616709448"),
            f("18748107085456859495495117012311103043200881556220793307463332157672741458218"),
            f("22196219950929618042921320796106738233125483954115679355597636800196070731081"),
            f("13054421325261400802177761929986025883530654947859503505174678618288142017333"),
            f("4799483385651443229337780097631636300491234601736019220096005875687579936102"),
        ]
    }

    pub fn rand() -> Self {
        let mut rng = rand::thread_rng();
        let rng = &mut rng;

        Self {
            challenge_polynomial_commitment: CurveAffine::rand(rng),
            old_bulletproof_challenges: [
                (0..15)
                    .map(|_| Fq::rand(rng))
                    .collect::<Vec<_>>()
                    .try_into()
                    .unwrap(),
                (0..15)
                    .map(|_| Fq::rand(rng))
                    .collect::<Vec<_>>()
                    .try_into()
                    .unwrap(),
            ],
        }
    }
}

#[derive(Clone, Debug, Deserialize, Serialize)]
#[serde(from = "PicklesProofProofsVerified2ReprStableV2MessagesForNextStepProof")]
#[serde(into = "PicklesProofProofsVerified2ReprStableV2MessagesForNextStepProof")]
pub struct MessagesForNextStepProof {
    pub protocol_state: ProtocolState,
    pub dlog_plonk_index: PlonkVerificationKeyEvals,
    pub challenge_polynomial_commitments: [CurveAffine<Fp>; 2],
    pub old_bulletproof_challenges: [[Fp; 16]; 2],
}

impl MessagesForNextStepProof {
    /// Implementation of `hash_messages_for_next_step_proof`
    /// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/pickles/common.ml#L33
    pub fn hash(&self) -> [u64; 4] {
        let fields: Vec<Fp> = self.to_fields();
        let field: Fp = hash_fields(&fields);

        let bigint: BigInteger256 = field.into_repr();
        bigint.0
    }

    /// Implementation of `to_field_elements`
    /// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/pickles/composition_types/composition_types.ml#L493
    fn to_fields(&self) -> Vec<Fp> {
        const NFIELDS: usize = 93;

        let mut fields = Vec::with_capacity(NFIELDS);

        // Self::dlog_plonk_index
        // Refactor with `src/account/account.rs`, this is the same code
        {
            let index = &self.dlog_plonk_index;

            for field in index.sigma {
                fields.push(field.0);
                fields.push(field.1);
            }

            for field in index.coefficients {
                fields.push(field.0);
                fields.push(field.1);
            }

            fields.push(index.generic.0);
            fields.push(index.generic.1);

            fields.push(index.psm.0);
            fields.push(index.psm.1);

            fields.push(index.complete_add.0);
            fields.push(index.complete_add.1);

            fields.push(index.mul.0);
            fields.push(index.mul.1);

            fields.push(index.emul.0);
            fields.push(index.emul.1);

            fields.push(index.endomul_scalar.0);
            fields.push(index.endomul_scalar.1);
        }

        // Self::app_state
        fields.push(self.protocol_state.hash());

        // Self::challenge_polynomial_commitments and Self::old_bulletproof_challenges
        let commitments = &self.challenge_polynomial_commitments;
        let old_challenges = &self.old_bulletproof_challenges;

        for (commitments, old) in commitments.iter().zip(old_challenges) {
            fields.push(commitments.0);
            fields.push(commitments.1);

            fields.extend_from_slice(old);
        }

        assert_eq!(fields.len(), NFIELDS);

        fields
    }

    pub fn rand() -> Self {
        let mut rng = rand::thread_rng();
        let rng = &mut rng;

        Self {
            protocol_state: ProtocolState::rand(rng),
            dlog_plonk_index: PlonkVerificationKeyEvals::rand(rng),
            challenge_polynomial_commitments: [CurveAffine::rand(rng), CurveAffine::rand(rng)],
            old_bulletproof_challenges: [
                (0..16)
                    .map(|_| Fp::rand(rng))
                    .collect::<Vec<_>>()
                    .try_into()
                    .unwrap(),
                (0..16)
                    .map(|_| Fp::rand(rng))
                    .collect::<Vec<_>>()
                    .try_into()
                    .unwrap(),
            ],
        }
    }
}

#[cfg(test)]
mod tests {
    use std::str::FromStr;

    use mina_curves::pasta::Fq;
    #[cfg(target_family = "wasm")]
    use wasm_bindgen_test::wasm_bindgen_test as test;

    use crate::FpExt;

    use super::*;

    /// Test that take the same inputs as in
    /// https://github.com/name-placeholder/mina-block-verifier-poc/blob/15d926f04948a35f4ee284c2b43bb82ae1798b0b/src/data/6324_state_with_proof_for_mina_node_minified.json
    #[test]
    fn test_hash_messages_for_next_wrap_proof() {
        // Fq::from_str
        let f = |s| Fq::from_str(s).unwrap();

        let msg = MessagesForNextWrapProof {
            challenge_polynomial_commitment: CurveAffine(
                f("16532551020203634961537860963115487481903930386300757307992520042262635136291"),
                f("21100728972294604822455258471387856325840198334043671900379056042685907098611"),
            ),
            old_bulletproof_challenges: [
                [
                    f("18930573265662216159442494814184247548231007813972071269603851935535469568681"),
                    f("13262618632343563854609319990042165233884668386778849308201250967495466297892"),
                    f("3280133380740312520798484208652485449441154026649408650609268816997503996596"),
                    f("5974304366701279384657274575561097681967365179758505920855016184604375547845"),
                    f("3661423464518527108104215048163162714022670481055215775284279432335542360947"),
                    f("28186039308015693212526267835091480366420716733534501029059512929488448172803"),
                    f("2928242866467619037394221722592602237395615492823915494722307192257841920053"),
                    f("7996242790950647686981276345325562931441969146107262270102737887450525547679"),
                    f("21300612581975001967226090647975097001166598554510871181982133469971233105666"),
                    f("20608125931317303080428446946426401578478104508733856541747380631345253223759"),
                    f("20544136014497620836884335380316800592936676638960436539103183677666423950244"),
                    f("18427567011408397204090055018472561464711254957456387310196545464234121256500"),
                    f("17571157148266047799767015777008435938200309464425419775013145733714886071865"),
                    f("9174651000781852149559362347943707955252174789399970369305126738373271491014"),
                    f("2598585929268909637848366187420073930931414900720607825745008437243507445619"),
                ],
                [
                    f("22500777911623293834365746452792468484215181313378114375078208812733332404116"),
                    f("7551293148525329712601215836802043795486868989401489115535053591009228948588"),
                    f("8172357207077341211421025767007921725672410939395814288016647544348097345196"),
                    f("21047422592334278881055780293007831530710862985276125438323624222040879060696"),
                    f("20585873647382063355679974696184625779943063534936436427492085704127902743678"),
                    f("7651029123786977445554870959478058293693583293394323573160039348233200839454"),
                    f("14036689417823437849683534764310594438790575584161063477905516552414036334314"),
                    f("534293266450274711526621367763917061496384261899114048635307227205400438806"),
                    f("6999135919518086119559774563850072473847459521518343667414436696961437984192"),
                    f("134102114303583952285714694376382833540242415036502686830543290587903694663"),
                    f("8111630062172053115500556268192456770925968285937934105043747827626424231925"),
                    f("4001978055828977404166090232051881760195387691132294765001590768946108731708"),
                    f("11579350927909145787975441625108637415157688001995610648811337370112312435070"),
                    f("27894769965888557933925149857064015696905942567405126148958848303857448246304"),
                    f("23634771650567114892617384429346808115966047240996616470981094489495810220064"),
                ]
            ],
        };

        const OCAML_LIST_FIELDS: &[&str] = &[
            "18930573265662216159442494814184247548231007813972071269603851935535469568681",
            "13262618632343563854609319990042165233884668386778849308201250967495466297892",
            "3280133380740312520798484208652485449441154026649408650609268816997503996596",
            "5974304366701279384657274575561097681967365179758505920855016184604375547845",
            "3661423464518527108104215048163162714022670481055215775284279432335542360947",
            "28186039308015693212526267835091480366420716733534501029059512929488448172803",
            "2928242866467619037394221722592602237395615492823915494722307192257841920053",
            "7996242790950647686981276345325562931441969146107262270102737887450525547679",
            "21300612581975001967226090647975097001166598554510871181982133469971233105666",
            "20608125931317303080428446946426401578478104508733856541747380631345253223759",
            "20544136014497620836884335380316800592936676638960436539103183677666423950244",
            "18427567011408397204090055018472561464711254957456387310196545464234121256500",
            "17571157148266047799767015777008435938200309464425419775013145733714886071865",
            "9174651000781852149559362347943707955252174789399970369305126738373271491014",
            "2598585929268909637848366187420073930931414900720607825745008437243507445619",
            "22500777911623293834365746452792468484215181313378114375078208812733332404116",
            "7551293148525329712601215836802043795486868989401489115535053591009228948588",
            "8172357207077341211421025767007921725672410939395814288016647544348097345196",
            "21047422592334278881055780293007831530710862985276125438323624222040879060696",
            "20585873647382063355679974696184625779943063534936436427492085704127902743678",
            "7651029123786977445554870959478058293693583293394323573160039348233200839454",
            "14036689417823437849683534764310594438790575584161063477905516552414036334314",
            "534293266450274711526621367763917061496384261899114048635307227205400438806",
            "6999135919518086119559774563850072473847459521518343667414436696961437984192",
            "134102114303583952285714694376382833540242415036502686830543290587903694663",
            "8111630062172053115500556268192456770925968285937934105043747827626424231925",
            "4001978055828977404166090232051881760195387691132294765001590768946108731708",
            "11579350927909145787975441625108637415157688001995610648811337370112312435070",
            "27894769965888557933925149857064015696905942567405126148958848303857448246304",
            "23634771650567114892617384429346808115966047240996616470981094489495810220064",
            "16532551020203634961537860963115487481903930386300757307992520042262635136291",
            "21100728972294604822455258471387856325840198334043671900379056042685907098611",
        ];

        let fields = msg.to_fields();
        let fields_str: Vec<String> = fields.iter().map(Fq::to_decimal).collect();

        // Make sure that we got the same list of fields as in OCaml
        assert_eq!(fields_str, OCAML_LIST_FIELDS);

        let result = msg.hash();

        const OCAML_RESULT: [u64; 4] = [
            -2757079307213834418i64 as u64,
            -7374019804543813095i64 as u64,
            -4454791831784549861i64 as u64,
            2589444293822685710,
        ];

        // Same result as OCaml
        assert_eq!(result, OCAML_RESULT);
    }

    /// Test that take the same inputs as in
    /// https://github.com/name-placeholder/mina-block-verifier-poc/blob/15d926f04948a35f4ee284c2b43bb82ae1798b0b/src/data/6324_state_with_proof_for_mina_node_minified.json
    #[test]
    fn test_messages_for_next_step_proof() {
        // Same data as in `6324_state_with_proof_for_mina_node_minified.json`
        let s = "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";

        let bytes = base64::decode(s).unwrap();
        let msg: MessagesForNextStepProof = serde_binprot::from_slice(&bytes).unwrap();

        let fields = msg.to_fields();
        let fields_str: Vec<String> = fields.iter().map(Fp::to_decimal).collect();

        const OCAML_LIST_FIELDS: &[&str] = &[
            "7306136642597923897555791151863996660212462335849450287367524537095180221634",
            "295836087001599150219965185724981361284218003091634650488121505386715848421",
            "16282821295661236479023912685539589269086626120234649164462902685519476656592",
            "4295205064453230912872101449993170792905970401678754749988147216841537937620",
            "28198697833219334189923816684717002543602920069910594785597266487498148523870",
            "17891203830156453876956078996004920271036014021533417224170974067208216601703",
            "5911229141700227144541715457557567697281122878785361348057987395367730692283",
            "22708119636146901915922769433803693592137966281563094238309392462134696713324",
            "15255289086154637723543383447202141216898127084181538793835838955534680243549",
            "9822992368845619458542559122419135424964624477009905295720933437908812438194",
            "28336751196692125825206280078298394562971507269177652352864439918563362023984",
            "17798914835779426211970460006818900956839587778737086433910561148699936807427",
            "12173487650256236567877294766780225205439671195087725509374927206658919988314",
            "8546295955797864127010988341190793828517919678470921685302947319507151962335",
            "15105854952902418834269591301217280524366983711045984608317191166708978127145",
            "18491376365795350144503269408455530343793482052663015956178048715513611406203",
            "16221864536502615631980979964668288450317317371147091060694095899151503639747",
            "9519306118137437477296160681347787831718742786237537419021099081673273432077",
            "1828375556492032543370630871599181680626054083827149513821341616496533931180",
            "14532553130399504128864273815175983572681327963499643450830578683158045051088",
            "13806143828658920604653811214459745160526156299899194105003039829404281939236",
            "21677366383028409741651124301672889055915143610106128174078188209337480718539",
            "7497365406686591516136275799519851738056433500165297000450415380901841834738",
            "11082673892088893582121464103698089526189574961395186300560026072577686710261",
            "21840051173290088750377335154124032240668643658355954102158068406791911456411",
            "17351682675035183551436994752568730447765316333728829284275431639098039334512",
            "14022762599686302176026646914549540717100346176029056416113460334917709226744",
            "27978245190056279229692763190303424169549043084254373363906247160646199594515",
            "14461461771799677654017777117338945851377547219104322838600220560516293427356",
            "17564757440118220600675489280590254151923712940706892869478972769840418457635",
            "21815598907196777691445920277857002103959228082570912063323130218788538733193",
            "7358237762751057012424941296608466274034817842087745360389357379284117549732",
            "11810626818371604294708453458309753376008077755506945420564072757415239409545",
            "26912748767395245377771123936593955842239086573241116606529426101611852107474",
            "28045754565497567218313815510153164850160812290001533322256204556878672210685",
            "4430614918184468006846751296134493176588839662954289976354926108393111505348",
            "19872404709285819095020477536140820966231416330563398437289255091306661382284",
            "19326322450955066267758337560000055419883224223428472906580812324929588841264",
            "27674068120067053785042736434998263020785858204524681324028670844064644633023",
            "27412857330835622333013445447634112239898888873844827807756556432593637880726",
            "24682236218499316256116184057935956900066450357800305437458989367500718714833",
            "27180938934433927690377545371633915753075499681300196017879714997797679192332",
            "25629315461974072970256979424923440745009227427597797969419480653812297129276",
            "1016868605640715040040077111084256295412989295229805290627862796628513565389",
            "12174451344901867371747121143916474287913641433558421954298894775115636105605",
            "12378066171942160329149126580141604161241179887990644873241995425596885988734",
            "7354720043741565412245146949416661672231346925994487137406963541785007652002",
            "18137987077150694625815400585246393656498160562154344002755317004470145216091",
            "20176380948677499445673804755402884536434103092222401927043369592526199334698",
            "26639113406603762994997253872861268998287702768326719951107939705363924703049",
            "16207127342744662697004906974217699328124928520738315414896942451468679742680",
            "10042405468630587369024209399619359647876676370159830003746139596973255635041",
            "2106392139716826410921444012744773412824354042372186953626000304539450302912",
            "17561438246294780941275031774356204175014323179177294715496325182731868568910",
            "4292031084185452020905940016648601803499113748499572807208798084208217009321",
            "16797976570717345665130946180893310089564099546398446160344589290942425835566",
            "18374648090405860613992788233169821778993111003846333489723278775260971534309",
            "12686921579279181053907007016585984857396279914247611886326721202037913453019",
            "17769836043765024617902464193165129733172354787973469110485472256690190533727",
            "7064008822864728398858417698649153554618393735019982159700213736571223036821",
            "21281073930096202884976340572605376014917627927607000098124963387126671667405",
            "20034221077127088921131022285724504665904750595809121027858777196941115095595",
            "18497339512896533967070595151637618702096421683793996188803218728257093313954",
            "26091707259541979535386026279646546924481219402460945255985587200333895442426",
            "26000802478877378291818950871303958371690312575800175603275158984631747112314",
            "3542775955255721718735057551619208290322691095579511881465771193916627523656",
            "26082193213255146858325625064941365409422644280364303832412501842706109482352",
            "14045706980484410694469015017617110793948725477238650483822693423475791735584",
            "19471582594431150457263082825199126200392919902939760347730982393598455884567",
            "1326396224493213224809637465524487722432218763470273737330947122279510339127",
            "17485742224041066720858261709734580297392897788368828400728418930917070940077",
            "11369682275649236437578679786208728227049581168916414391705587421204991504471",
            "5558430160842950378525019782179979114837605858253956740879954326712738838869",
            "17514922848108718369845316737207968652832912751889238861905018424256428652733",
            "11088960946452242729814251490831984807138805895197664788816609458265399565988",
            "21022521418477672796138321373890300031459566700970481245425917589929493452691",
            "4307241244195583897765346136869393587010871207731931320075062354311383981886",
            "7495663189519076456878324238415292467012945870012832444850485639358393479268",
            "388698164585548974934817724189574785139851269733029709355370076076616265220",
            "16211690239820640934419707440800640715772094470488029352806394140849460499366",
            "19660767386333838085549000243591542798150442487419024559562124380763066947223",
            "3804191934641277266825939456740395716006727418575334949907761799006951240328",
            "18570333327677121098853677483616132304851142649800358431192661910558495770797",
            "2885988345150694614354230616472074099998052091287012799686730182775015809772",
            "26941570725129557194472457464313030750768597876248657068167847720705824432410",
            "11031939102021548268582687527395546394462552178834987820391978709224042719328",
            "6635159214963234537223243370996260502046741015718543202847863438182226573507",
            "3123982144639717810070104930175949984822659675428941158107237873724846395068",
            "22100131743595904534278023371975366782332995882031444298009028129572218436492",
            "26699469737251775041171879406801327630656476958614785279587470558078266497754",
            "14931081622979512493702242057574822158556931395424601456904686553568978135221",
            "13215496949030789875154586717734663769533434569051642948945201035069761057380",
            "9608414576668132631768032439576786729901517711700624403511207659611494885692",
        ];

        // Make sure that we got the same list of fields as in OCaml
        assert_eq!(fields_str, OCAML_LIST_FIELDS);

        let result = msg.hash();
        const OCAML_RESULT: [u64; 4] = [
            7912308706379928291,
            8689988569980666660,
            5997160798854948936,
            3770142804027174900,
        ];

        // Same result as OCaml
        assert_eq!(result, OCAML_RESULT);
    }
}
